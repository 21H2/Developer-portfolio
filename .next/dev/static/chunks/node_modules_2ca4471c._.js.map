{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@studio-freight/lenis/dist/lenis.modern.mjs","sources":["file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/maths.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/animate.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/dimensions.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/debounce.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/emitter.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/virtual-scroll.js","file:///workspaces/Developer-portfolio/node_modules/%40studio-freight/lenis/src/index.js"],"sourcesContent":["// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n","import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(\r\n    from,\r\n    to,\r\n    { lerp = 0.1, duration = 1, easing = (t) => t, onStart, onUpdate }\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n","import { debounce } from './debounce'\r\n\r\nexport class Dimensions {\r\n  constructor({ wrapper, content, autoResize = true } = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      const resize = debounce(this.resize, 250)\r\n\r\n      if (this.wrapper !== window) {\r\n        this.wrapperResizeObserver = new ResizeObserver(resize)\r\n        this.wrapperResizeObserver.observe(this.wrapper)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(resize)\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    this.scrollHeight = this.content.scrollHeight\r\n    this.scrollWidth = this.content.scrollWidth\r\n  }\r\n\r\n  get limit() {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n","export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n","export class Emitter {\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event, ...args) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event, cb) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\r\n    }\r\n  }\r\n\r\n  off(event, callback) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n","import { Emitter } from './emitter'\r\nimport { clamp } from './maths'\r\n\r\nexport class VirtualScroll {\r\n  constructor(\r\n    element,\r\n    { wheelMultiplier = 1, touchMultiplier = 2, normalizeWheel = false }\r\n  ) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n    this.normalizeWheel = normalizeWheel\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel, { passive: false })\r\n    this.element.addEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event, callback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - this.touchStart.x) * this.touchMultiplier\r\n    const deltaY = -(clientY - this.touchStart.y) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event) => {\r\n    let { deltaX, deltaY } = event\r\n\r\n    if (this.normalizeWheel) {\r\n      deltaX = clamp(-100, deltaX, 100)\r\n      deltaY = clamp(-100, deltaY, 100)\r\n    }\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n}\r\n","import { version } from '../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\nexport default class Lenis {\r\n  // isScrolling = true when scroll is animating\r\n  // isStopped = true if user should not be able to scroll - enable/disable programmatically\r\n  // isSmooth = true if scroll should be animated\r\n  // isLocked = same as isStopped but enabled/disabled when scroll reaches target\r\n\r\n  /**\r\n   * @typedef {(t: number) => number} EasingFunction\r\n   * @typedef {'vertical' | 'horizontal'} Orientation\r\n   * @typedef {'vertical' | 'horizontal' | 'both'} GestureOrientation\r\n   *\r\n   * @typedef LenisOptions\r\n   * @property {Window | HTMLElement} [wrapper]\r\n   * @property {HTMLElement} [content]\r\n   * @property {Window | HTMLElement} [wheelEventsTarget] // deprecated\r\n   * @property {Window | HTMLElement} [eventsTarget]\r\n   * @property {boolean} [smoothWheel]\r\n   * @property {boolean} [smoothTouch]\r\n   * @property {boolean} [syncTouch]\r\n   * @property {number} [syncTouchLerp]\r\n   * @property {number} [__iosNoInertiaSyncTouchLerp]\r\n   * @property {number} [touchInertiaMultiplier]\r\n   * @property {number} [duration]\r\n   * @property {EasingFunction} [easing]\r\n   * @property {number} [lerp]\r\n   * @property {boolean} [infinite]\r\n   * @property {Orientation} [orientation]\r\n   * @property {GestureOrientation} [gestureOrientation]\r\n   * @property {number} [touchMultiplier]\r\n   * @property {number} [wheelMultiplier]\r\n   * @property {boolean} [normalizeWheel]\r\n   * @property {boolean} [autoResize]\r\n   *\r\n   * @param {LenisOptions}\r\n   */\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    smoothTouch = false,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.1,\r\n    __iosNoInertiaSyncTouchLerp = 0.4, // should be 1 but had to leave 0.4 for iOS (testing purpose)\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = !duration && 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    normalizeWheel = false,\r\n    autoResize = true,\r\n  } = {}) {\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (wrapper === document.documentElement || wrapper === document.body) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      smoothTouch,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      __iosNoInertiaSyncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      normalizeWheel,\r\n      autoResize,\r\n    }\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    this.toggleClass('lenis', true)\r\n\r\n    this.velocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    this.isSmooth = syncTouch || smoothWheel || smoothTouch\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, {\r\n      passive: false,\r\n    })\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      normalizeWheel,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener('scroll', this.onNativeScroll, {\r\n      passive: false,\r\n    })\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.toggleClass('lenis', false)\r\n    this.toggleClass('lenis-smooth', false)\r\n    this.toggleClass('lenis-scrolling', false)\r\n    this.toggleClass('lenis-stopped', false)\r\n    this.toggleClass('lenis-locked', false)\r\n  }\r\n\r\n  on(event, callback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event, callback) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  setScroll(scroll) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  onVirtualScroll = ({ deltaX, deltaY, event }) => {\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    if (\r\n      (this.options.gestureOrientation === 'both' &&\r\n        deltaX === 0 &&\r\n        deltaY === 0) || // \"touchend\" events prevents \"click\"\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) || // trackpad previous/next page gesture\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0) ||\r\n      (isTouch &&\r\n        this.options.gestureOrientation === 'vertical' &&\r\n        this.scroll === 0 &&\r\n        !this.options.infinite &&\r\n        deltaY <= 0) // touch pull to refresh\r\n    )\r\n      return\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node.hasAttribute?.('data-lenis-prevent') ||\r\n          (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n          (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n          node.classList?.contains('lenis') // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault()\r\n      return\r\n    }\r\n\r\n    this.isSmooth =\r\n      ((this.options.smoothTouch || this.options.syncTouch) && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!this.isSmooth) {\r\n      this.isScrolling = false\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 1\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch && {\r\n        lerp: hasTouchInertia\r\n          ? this.syncTouchLerp\r\n          : this.options.__iosNoInertiaSyncTouchLerp,\r\n      }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  onNativeScroll = () => {\r\n    if (this.__preventNextScrollEvent) return\r\n\r\n    if (!this.isScrolling) {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.velocity = 0\r\n      this.direction = Math.sign(this.animatedScroll - lastScroll)\r\n      this.emit()\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = !duration && this.options.lerp,\r\n      onComplete = null,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (['top', 'left', 'start'].includes(target)) {\r\n      target = 0\r\n    } else if (['bottom', 'right', 'end'].includes(target)) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.options.wrapper.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      onComplete?.(this)\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      if (target === this.targetScroll) return\r\n\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = true\r\n      },\r\n      onUpdate: (value, completed) => {\r\n        this.isScrolling = true\r\n\r\n        // updated\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity)\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n\r\n          // avoid emitting event twice\r\n          this.__preventNextScrollEvent = true\r\n          requestAnimationFrame(() => {\r\n            delete this.__preventNextScrollEvent\r\n          })\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return this.options.wrapper === window\r\n      ? document.documentElement\r\n      : this.options.wrapper\r\n  }\r\n\r\n  get limit() {\r\n    return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll() {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll() {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress() {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.__isSmooth\r\n  }\r\n\r\n  set isSmooth(value) {\r\n    if (this.__isSmooth !== value) {\r\n      this.__isSmooth = value\r\n      this.toggleClass('lenis-smooth', value)\r\n    }\r\n  }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  set isScrolling(value) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.toggleClass('lenis-scrolling', value)\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  set isStopped(value) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.toggleClass('lenis-stopped', value)\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  set isLocked(value) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.toggleClass('lenis-locked', value)\r\n    }\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  toggleClass(name, value) {\r\n    this.rootElement.classList.toggle(name, value)\r\n    this.emitter.emit('className change', this)\r\n  }\r\n}\r\n"],"names":["clamp","min","input","max","Math","Animate","advance","deltaTime","_this$onUpdate","this","isRunning","completed","lerp","value","x","y","to","t","exp","round","currentTime","linearProgress","duration","easedProgress","easing","from","onUpdate","call","stop","fromTo","onStart","Dimensions","constructor","wrapper","content","autoResize","resize","onWrapperResize","onContentResize","window","width","innerWidth","height","innerHeight","clientWidth","clientHeight","scrollHeight","scrollWidth","callback","delay","timer","args","arguments","context","clearTimeout","setTimeout","apply","debounce","wrapperResizeObserver","ResizeObserver","observe","contentResizeObserver","destroy","_this$wrapperResizeOb","_this$contentResizeOb","disconnect","limit","Emitter","events","emit","event","callbacks","i","length","on","cb","_this$events$event","push","_this$events$event2","filter","off","_this$events$event3","VirtualScroll","element","wheelMultiplier","touchMultiplier","normalizeWheel","onTouchStart","clientX","clientY","targetTouches","touchStart","lastDelta","onTouchMove","deltaX","deltaY","emitter","onTouchEnd","onWheel","addEventListener","passive","removeEventListener","Lenis","document","documentElement","wheelEventsTarget","eventsTarget","smoothWheel","smoothTouch","syncTouch","syncTouchLerp","__iosNoInertiaSyncTouchLerp","touchInertiaMultiplier","pow","infinite","orientation","gestureOrientation","onVirtualScroll","ctrlKey","isTouch","type","includes","isWheel","options","scroll","composedPath","slice","indexOf","rootElement","find","node","_node$classList","hasAttribute","classList","contains","isStopped","isLocked","preventDefault","isSmooth","isScrolling","animate","delta","abs","hasTouchInertia","velocity","scrollTo","targetScroll","_extends","programmatic","onNativeScroll","__preventNextScrollEvent","lastScroll","animatedScroll","actualScroll","direction","sign","lenisVersion","body","dimensions","toggleClass","virtualScroll","setScroll","isHorizontal","scrollLeft","scrollTop","reset","start","raf","time","target","offset","immediate","lock","onComplete","force","_target","querySelector","nodeType","wrapperRect","getBoundingClientRect","left","top","rect","requestAnimationFrame","d","progress","__isSmooth","__isScrolling","__isStopped","__isLocked","className","name","toggle"],"mappings":"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","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs","sources":["file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/core/IO.ts","file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/utils/maths.ts","file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/core/ScrollElement.ts","file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/core/Core.ts","file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/core/RO.ts","file:///workspaces/Developer-portfolio/node_modules/locomotive-scroll/src/index.ts"],"sourcesContent":["/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n","/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n","/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n","//@ts-ignore\nimport Lenis from '@studio-freight/lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisOptions,\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\n\n/**\n * @type {ILenisOptions}\n */\nconst defaultLenisOptions: ILenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    eventsTarget: window,\n    lerp: 0.1,\n    duration: 0.75,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    smoothWheel: true,\n    smoothTouch: false,\n    syncTouch: false,\n    syncTouchLerp: 0.1,\n    touchInertiaMultiplier: 35,\n    wheelMultiplier: 1,\n    touchMultiplier: 2,\n    normalizeWheel: false,\n    autoResize: true,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/studio-freight/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: ILenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            smoothTouch: this.lenisOptions.smoothTouch,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            normalizeWheel: this.lenisOptions.normalizeWheel,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"],"names":["IO","constructor","scrollElements","rootMargin","IORaf","this","observer","_init","IntersectionObserver","entries","forEach","entry","$targetItem","find","item","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","scrollElement","observe","destroy","disconnect","$scrollElement","unobserve","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","mapRange","inMin","inMax","outMin","outMax","value","closestNumber","array","reduce","prev","curr","Math","abs","ScrollElement","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","scrollOrientation","_this$$el$dataset$scr","_this$$el$dataset$scr2","_this$$el$dataset$scr3","_this$$el$dataset$scr4","_this$$el$dataset$scr5","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","scrollPosition","scrollModuleProgress","scrollCssProgress","scrollEventProgress","scrollSpeed","parseFloat","scrollCall","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","onRender","smooth","wSize","innerHeight","innerWidth","_computeProgress","isNaN","max","style","transform","classList","add","from","_getScrollCallFrom","_dispatchCall","remove","getBoundingClientRect","_computeMetrics","_computeIntersection","top","left","height","width","metricsSize","offset","split","undefined","trim","scrollPositionStart","scrollPositionEnd","viewportStart","includes","parseInt","replace","viewportEnd","forcedProgress","_setCssProgress","_setCustomEventProgress","modularModules","call","moduleName","moduleId","currentProgress","setProperty","toString","customEventName","customEvent","CustomEvent","detail","dispatchEvent","modulesIdNames","Object","keys","filter","key","modules","length","modulesIdName","module","moduleObj","push","closestIntersectionValue","way","_this$attributes$scro","_this$attributes","callParameters","callSelf","_targetModuleId","func","targetModuleId","ATTRIBUTES_THAT_NEED_RAF","Core","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","$scrollElements","querySelectorAll","$scrollElementsArr","Array","_subscribeScrollElements","_unsubscribeAllScrollElements","removeScrollElements","$oldContainer","$scrollElementsToRemove","index","indexOf","splice","targetScrollElementToUpdate","targetScrollElement","_unsubscribeElementUpdate","scrollElementItem","addScrollElements","$newContainer","ids","fromIndex","toObserve","_checkRafNeeded","scrollElementInstance","_subscribeElementUpdate","bind","scrollElementToUpdate","attributesThatNeedRaf","removeAttribute","attributeToRemove","attribute","map","test","join","RO","resizeElements","resizeCallback","$resizeElements","isFirstObserve","ResizeObserver","_this$resizeCallback","$resizeElement","defaultLenisOptions","wrapper","content","document","documentElement","eventsTarget","lerp","duration","orientation","gestureOrientation","smoothWheel","smoothTouch","syncTouch","syncTouchLerp","touchInertiaMultiplier","wheelMultiplier","touchMultiplier","normalizeWheel","autoResize","easing","t","min","pow","LocomotiveScroll","lenisOptions","autoStart","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","_extends","assign","_onRender","_onScrollTo","_onResize","_this$lenisInstance","Lenis","on","setAttribute","options","requestAnimationFrame","rootElement","_bindEvents","warn","_this$coreInstance","stop","_unbindEvents","_this$coreInstance2","_bindScrollToEvents","body","addEventListener","_unbindScrollToEvents","removeEventListener","$container","$rootContainer","$scrollToElements","_this$coreInstance3","scroll","_this$lenisInstance2","_this$coreInstance4","raf","Date","now","isSmooth","event","_event$currentTarget","preventDefault","$target","currentTarget","getAttribute","scrollTo","_this$lenisInstance3","_raf","_this$lenisInstance4","cancelAnimationFrame","_this$coreInstance5","_this$coreInstance6","resize","_this$lenisInstance5","immediate","lock","force","onComplete"],"mappings":";;;;;;;;;MAkBqBA;IAMjBC,YAAAA,EAAYC,gBACRA,CAAAA,EAAcC,YACdA,IAAa,qBAAA,EAAqBC,OAClCA,CAAAA,EAAAA,CAAAA;QACSC,IAAAA,CATNH,cAAAA,GAAAA,KACCC,GAAAA,IAAAA,CAAAA,UAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,KAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAE,QAAAA,GAAAA,KAAQ,GAQZD,IAAAA,CAAKH,cAAAA,GAAiBA,GACtBG,IAAAA,CAAKF,UAAAA,GAAaA,GAClBE,IAAAA,CAAKD,KAAAA,GAAQA,GAGbC,IAAAA,CAAKE,KAAAA;IACT;IAOQA,QAAAA;QAwBJF,IAAAA,CAAKC,QAAAA,GAAW,IAAIE,sBAjBCC;YACjBA,EAAQC,OAAAA,EAASC;gBACb,MAAMC,IACFP,IAAAA,CAAKH,cAAAA,CAAeW,IAAAA,EACfC,IAASA,EAAKC,GAAAA,KAAQJ,EAAMK,MAAAA;gBAGjCL,EAAMM,cAAAA,GAAAA,CACNL,KAAAA,CAAgBA,EAAYM,oBAAAA,GAAAA,CAAuB,CAAA,GACnDb,IAAAA,CAAKc,UAAAA,CAAWR,EAAAA,IACTC,KAAeA,EAAYM,oBAAAA,IAClCb,IAAAA,CAAKe,aAAAA,CAAcT;YACtB;QAET,GAnBwB;YACpBR,YAAYE,IAAAA,CAAKF,UAAAA;QAAAA;QAwBrB,KAAK,MAAMkB,KAAAA,IAAAA,CAAsBnB,cAAAA,CAE7BG,IAAAA,CAAKiB,OAAAA,CADkBD,EAAcN,GAAAA;IAG7C;IAKOQ,UAAAA;QACHlB,IAAAA,CAAKC,QAAAA,CAASkB,UAAAA;IAClB;IAOOF,QAAQG,CAAAA,EAAAA;QACNA,KAILpB,IAAAA,CAAKC,QAAAA,CAASgB,OAAAA,CAAQG;IAC1B;IAOOC,UAAUD,CAAAA,EAAAA;QACRA,KAILpB,IAAAA,CAAKC,QAAAA,CAASoB,SAAAA,CAAUD;IAC5B;IASQN,WAAWR,CAAAA,EAAAA;QACf,MAAMU,IAAgBhB,IAAAA,CAAKH,cAAAA,CAAeW,IAAAA,EACrCQ,IAAkBA,EAAcN,GAAAA,KAAQJ,EAAMK,MAAAA;QAGnDX,IAAAA,CAAKD,KAAAA,IAAAA,CAAsB,QAAbiB,KAAAA,EAAeM,kBAAAA,EAAAA,GAAAA,CAC5BtB,IAAAA,CAAKD,KAAAA,IAAAA,CAASiB,QAAAA,KAAAA,EAAeO,SAAAA,EAAAA;IAClC;IASQR,cAAcT,CAAAA,EAAAA;QAClB,MAAMU,IAAgBhB,IAAAA,CAAKH,cAAAA,CAAeW,IAAAA,EACrCQ,IAAkBA,EAAcN,GAAAA,KAAQJ,EAAMK,MAAAA;QAGnDX,IAAAA,CAAKD,KAAAA,IAAAA,CAAsB,QAAbiB,KAAAA,EAAeQ,mBAAAA,EAAAA,GAAAA,CAC5BxB,IAAAA,CAAKD,KAAAA,IAAAA,CAASiB,QAAAA,KAAAA,EAAeS,YAAAA,EAAAA,GAGZ,QAAbT,KAAAA,EAAeU,UAAAA,CAAWC,YAAAA,IAAiB3B,IAAAA,CAAKD,KAAAA,IACjDC,IAAAA,CAAKqB,SAAAA,CAAUf,EAAMK,MAAAA;IAE7B;AAAA;AAAA,SCtHYiB,EACZC,CAAAA,EACAC,CAAAA,EACAC,CAAAA,EACAC,CAAAA,EACAC,CAAAA;IAIA,OAAOF,IAAAA,CAAAA,CAAYE,IAAQJ,CAAAA,IAAAA,CAFXC,IAAQD,CAAAA,IAAAA,CACPG,IAASD,CAAAA,KACiC,CAAA;AAC/D;AAuBgB,SAAAG,EAAcC,CAAAA,EAAiBxB,CAAAA;IAC3C,OAAOwB,EAAMC,MAAAA,CAAO,CAACC,GAAMC,IAChBC,KAAKC,GAAAA,CAAIF,IAAO3B,KAAU4B,KAAKC,GAAAA,CAAIH,IAAO1B,KAAU2B,IAAOD;AAE1E;AAAA,MC1BqBI;IAwBjB7C,YAAAA,EAAYc,KACRA,CAAAA,EAAGgC,IACHA,CAAAA,EAAEC,iBACFA,CAAAA,EAAeC,0BACfA,CAAAA,EAAwBC,4BACxBA,CAAAA,EAA0BC,SAC1BA,CAAAA,EAAOC,mBACPA,CAAAA,EAAAA,CAAAA;QACoBC,IAAAA,GAAAC,GAAAC,GAAAC,GAAAC;QAAApD,IAAAA,CA/BjBU,GAAAA,GAAAA,KAAG,GAAAV,IAAAA,CACH0C,EAAAA,GAAAA,KACAI,GAAAA,IAAAA,CAAAA,OAAAA,GAAAA,KACApB,GAAAA,IAAAA,CAAAA,UAAAA,GAAAA,KACAqB,GAAAA,IAAAA,CAAAA,iBAAAA,GAAAA,KACAlC,GAAAA,IAAAA,CAAAA,oBAAAA,GAAAA,KAECwC,GAAAA,IAAAA,CAAAA,YAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,OAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,cAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAC,QAAAA,GAAAA,KAAQ,GAAAzD,IAAAA,CACR0D,YAAAA,GAAAA,KAAY,GAAA1D,IAAAA,CACZ2C,eAAAA,GAAAA,KAAe,GAAA3C,IAAAA,CACf2D,sBAAAA,GAAAA,KAAsB,GAAA3D,IAAAA,CACtB4D,QAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,QAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KAEAnB,GAAAA,IAAAA,CAAAA,wBAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAC,0BAAAA,GAAAA,KAA0B,GAY9B7C,IAAAA,CAAKU,GAAAA,GAAMA,GAEXV,IAAAA,CAAK0C,EAAAA,GAAKA,GAEV1C,IAAAA,CAAK8C,OAAAA,GAAUA,GAEf9C,IAAAA,CAAK+C,iBAAAA,GAAoBA,GAEzB/C,IAAAA,CAAK2C,eAAAA,GAAkBA,GAEvB3C,IAAAA,CAAK4C,wBAAAA,GAA2BA,GAChC5C,IAAAA,CAAK6C,0BAAAA,GAA6BA,GAGlC7C,IAAAA,CAAK0B,UAAAA,GAAa;YACdsC,aAA4ChB,QAAAA,CAAjCA,IAAEhD,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAqB,WAAA,IAACjB,IArDnC;YAsDTkB,cAA8CjB,QAAAA,CAAlCA,IAAEjD,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAsB,YAAA,IAAChB,IAAI;YAClDkB,gBAAAA,QAAAA,CAAcjB,IAAElD,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAwB,cAAA,IAACf,IAAI;YACtDkB,sBACgD,QAA5CpE,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAA8B,oBAAA;YAC3CI,mBAA4D,QAAzCrE,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAA2B,iBAAA;YACvDK,qBAC2C,QAAA,CADxBnB,IACfnD,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAA6B,mBAAA,IAACd,IAAI;YAC/CoB,aACuC,QAAnCvE,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAqB,WAAA,GACxBO,WAAWxE,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAqB,WAAA,IACzC;YACVtC,cAAkD,QAApC3B,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAsB,YAAA;YAC7CQ,YAA0C,QAAA,CAAhCrB,IAAEpD,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAoB,UAAA,IAACb,IAAI;YAC9CsB,gBAAsD,QAAtC1E,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAwB,cAAA;YACjDU,kBAA0D,QAAxC3E,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAA0B,gBAAA;YACrDW,wBACkD,QAA9C5E,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAgC,sBAAA;QAAA,GAIjDjE,IAAAA,CAAKqD,YAAAA,GAAe;YAChBwB,OAAO;YACPC,KAAK;QAAA,GAIT9E,IAAAA,CAAKsD,OAAAA,GAAU;YACXyB,aAAa;YACbC,WAAW;YACXC,KAAK,CAAA;QAAA,GAITjF,IAAAA,CAAKuD,aAAAA,GAC0B,eAA3BvD,IAAAA,CAAK+C,iBAAAA,GACCmC,OAAOC,OAAAA,GACPD,OAAOE,OAAAA,EAGjBpF,IAAAA,CAAKwD,cAAAA,GAAiB,GAGtBxD,IAAAA,CAAKyD,QAAAA,GAAW,GAChBzD,IAAAA,CAAK0D,YAAAA,GAAe,MACpB1D,IAAAA,CAAK2D,sBAAAA,GAAyB,EAAA,EAG9B3D,IAAAA,CAAK4D,QAAAA,GAAAA,CAAW,GAChB5D,IAAAA,CAAK6D,aAAAA,GAAAA,CAAgB,GACrB7D,IAAAA,CAAKa,oBAAAA,GAAAA,CAAuB,GAC5Bb,IAAAA,CAAK8D,QAAAA,GAAAA,CAAW,GAChB9D,IAAAA,CAAK+D,aAAAA,GAAAA,CAAgB,GAGrB/D,IAAAA,CAAKE,KAAAA;IACT;IAOQA,QAAAA;QACCF,IAAAA,CAAK8C,OAAAA,IAAAA,CAKN9C,IAAAA,CAAK2C,eAAAA,IAAmB3C,IAAAA,CAAK0B,UAAAA,CAAW0C,oBAAAA,IACxCpE,IAAAA,CAAKqF,0BAAAA,IAITrF,IAAAA,CAAKsF,OAAAA,EAAAA;IACT;IAKOC,SAAAA,EAAShC,eAAEA,CAAAA,EAAAA,EAAAA;QACdvD,IAAAA,CAAKuD,aAAAA,GAAgBA,GACrBvD,IAAAA,CAAKsF,OAAAA;IACT;IAKOE,SAAAA,EAASjC,eAAEA,CAAAA,EAAakC,QAAEA,CAAAA,EAAAA,EAAAA;QAC7B,MAAMC,IACyB,eAA3B1F,IAAAA,CAAK+C,iBAAAA,GACCmC,OAAOS,WAAAA,GACPT,OAAOU,UAAAA;QAKjB,IAJA5F,IAAAA,CAAKuD,aAAAA,GAAgBA,GACrBvD,IAAAA,CAAK6F,gBAAAA,IAID7F,IAAAA,CAAK0B,UAAAA,CAAW6C,WAAAA,IAAAA,CACfuB,MAAM9F,IAAAA,CAAK0B,UAAAA,CAAW6C,WAAAA,GAGvB,IAAKvE,IAAAA,CAAK0B,UAAAA,CAAWkD,sBAAAA,IAA2Ba,GAOzC;YAEH,IAAIzF,IAAAA,CAAK8D,QAAAA,EAAU;gBACf,MAAML,IAAWlB,KAAKwD,GAAAA,CAAI,GAAG/F,IAAAA,CAAKyD,QAAAA;gBAClCzD,IAAAA,CAAKwD,cAAAA,GACDC,IAAWiC,IAAQ1F,IAAAA,CAAK0B,UAAAA,CAAW6C,WAAAA,GAAAA,CAAe;YACzD,OAAM;gBACH,MAAMd,IAAW7B,EAAS,GAAG,GAAA,CAAI,GAAG,GAAG5B,IAAAA,CAAKyD,QAAAA;gBAC5CzD,IAAAA,CAAKwD,cAAAA,GACDC,IAAWiC,IAAQ1F,IAAAA,CAAK0B,UAAAA,CAAW6C,WAAAA,GAAAA,CAAe;YACzD;YAEDvE,IAAAA,CAAKU,GAAAA,CAAIsF,KAAAA,CAAMC,SAAAA,GACgB,eAA3BjG,IAAAA,CAAK+C,iBAAAA,GACC,CAAA,eAAA,EAAkB/C,IAAAA,CAAKwD,cAAAA,CAAAA,MAAAA,CAAAA,GACR,CAAA,YAAA,EAAAxD,IAAAA,CAAKwD,cAAAA,CAAAA,SAAAA;QACjC,OAtBOxD,IAAAA,CAAKwD,cAAAA,IAAAA,CACLxD,IAAAA,CAAKU,GAAAA,CAAIsF,KAAAA,CAAMC,SAAAA,GAAAA,sBAAAA,GAEnBjG,IAAAA,CAAKwD,cAAAA,GAAiB;IAqBlC;IAKOjC,YAAAA;QACH,IAAIvB,IAAAA,CAAK4D,QAAAA,EACL;QAGJ5D,IAAAA,CAAK4D,QAAAA,GAAAA,CAAW,GAChB5D,IAAAA,CAAKU,GAAAA,CAAIwF,SAAAA,CAAUC,GAAAA,CAAInG,IAAAA,CAAK0B,UAAAA,CAAWsC,WAAAA;QAEvC,MACMoC,IAAuBpG,IAAAA,CAAKqG,kBAAAA;QAClCrG,IAAAA,CAAK0B,UAAAA,CAAW+C,UAAAA,IAAczE,IAAAA,CAAKsG,aAAAA,CAFR,SAE2BF;IAC1D;IAKO3E,eAAAA;QACH,IAAA,CAAMzB,IAAAA,CAAK4D,QAAAA,IAAAA,CAAY5D,IAAAA,CAAK0B,UAAAA,CAAWC,YAAAA,EACnC;QAGJ3B,IAAAA,CAAK4D,QAAAA,GAAAA,CAAW,GAChB5D,IAAAA,CAAKU,GAAAA,CAAIwF,SAAAA,CAAUK,MAAAA,CAAOvG,IAAAA,CAAK0B,UAAAA,CAAWsC,WAAAA;QAE1C,MACMoC,IAAuBpG,IAAAA,CAAKqG,kBAAAA;QAClCrG,IAAAA,CAAK0B,UAAAA,CAAW+C,UAAAA,IAAczE,IAAAA,CAAKsG,aAAAA,CAFR,SAE2BF;IAC1D;IAMO9E,qBAAAA;QACCtB,IAAAA,CAAK6D,aAAAA,IAAAA,CAIT7D,IAAAA,CAAK6D,aAAAA,GAAAA,CAAgB,GACrB7D,IAAAA,CAAK4C,wBAAAA,CAAyB5C,IAAAA,CAAAA;IAClC;IAMOwB,sBAAAA;QACExB,IAAAA,CAAK6D,aAAAA,IAAAA,CAIV7D,IAAAA,CAAK6D,aAAAA,GAAAA,CAAgB,GACrB7D,IAAAA,CAAK6C,0BAAAA,CAA2B7C,IAAAA,GAGX,QAArBA,IAAAA,CAAK0D,YAAAA,IACD1D,IAAAA,CAAK6F,gBAAAA,CAAiB3D,EAAc;YAAC;YAAG;SAAA,EAAIlC,IAAAA,CAAK0D,YAAAA,EAAAA;IACzD;IAOQ4B,UAAAA;QACJtF,IAAAA,CAAKsD,OAAAA,CAAQ2B,GAAAA,GAAMjF,IAAAA,CAAKU,GAAAA,CAAI8F,qBAAAA,IAC5BxG,IAAAA,CAAKyG,eAAAA,IACLzG,IAAAA,CAAK0G,oBAAAA,IAGD1G,IAAAA,CAAK+D,aAAAA,IAAAA,CACL/D,IAAAA,CAAK+D,aAAAA,GAAAA,CAAgB,GAEjB/D,IAAAA,CAAK8D,QAAAA,IACL9D,IAAAA,CAAKuB,SAAAA,EAAAA;IAGjB;IAOQkF,kBAAAA;QACJ,MAAA,EAAME,KAAEA,CAAAA,EAAGC,MAAEA,CAAAA,EAAIC,QAAEA,CAAAA,EAAMC,OAAEA,CAAAA,EAAAA,GAAU9G,IAAAA,CAAKsD,OAAAA,CAAQ2B,GAAAA,EAC5CS,IACyB,eAA3B1F,IAAAA,CAAK+C,iBAAAA,GACCmC,OAAOS,WAAAA,GACPT,OAAOU,UAAAA,EAEXmB,IACyB,eAA3B/G,IAAAA,CAAK+C,iBAAAA,GAAmC8D,IAASC;QAErD9G,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GACT/E,IAAAA,CAAKuD,aAAAA,GAAAA,CALuC,eAA3BvD,IAAAA,CAAK+C,iBAAAA,GAAmC4D,IAAMC,CAAAA,IAK3B5G,IAAAA,CAAKwD,cAAAA,EAC7CxD,IAAAA,CAAKsD,OAAAA,CAAQ0B,SAAAA,GAAYhF,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAcgC,GAMhD/G,IAAAA,CAAK8D,QAAAA,GAHL9D,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAcW,KAAAA,CAC1B1F,IAAAA,CAAK0B,UAAAA,CAAWiD;IAMzB;IAOQ+B,uBAAAA;QAEJ,MAAMhB,IACyB,eAA3B1F,IAAAA,CAAK+C,iBAAAA,GACCmC,OAAOS,WAAAA,GACPT,OAAOU,UAAAA,EAGXmB,IACyB,eAA3B/G,IAAAA,CAAK+C,iBAAAA,GACC/C,IAAAA,CAAKsD,OAAAA,CAAQ2B,GAAAA,CAAI4B,MAAAA,GACjB7G,IAAAA,CAAKsD,OAAAA,CAAQ2B,GAAAA,CAAI6B,KAAAA,EAGrBE,IAAShH,IAAAA,CAAK0B,UAAAA,CAAWwC,YAAAA,CAAa+C,KAAAA,CAAM,MAC5ClC,IAA2BmC,QAAbF,CAAAA,CAAO,EAAA,GAAkBA,CAAAA,CAAO,EAAA,CAAGG,IAAAA,KAAS,KAC1DnC,IAAyBkC,QAAbF,CAAAA,CAAO,EAAA,GAAkBA,CAAAA,CAAO,EAAA,CAAGG,IAAAA,KAAS,KAGxDhD,IAAiBnE,IAAAA,CAAK0B,UAAAA,CAAWyC,cAAAA,CAAe8C,KAAAA,CAAM;QAC5D,IAAIG,IACqBF,QAArB/C,CAAAA,CAAe,EAAA,GAAkBA,CAAAA,CAAe,EAAA,CAAGgD,IAAAA,KAAS;QAChE,MAAME,IACmBH,QAArB/C,CAAAA,CAAe,EAAA,GAAkBA,CAAAA,CAAe,EAAA,CAAGgD,IAAAA,KAAS,OAG1DG,IAAgBvC,EAAYwC,QAAAA,CAAS,OACrC7B,IAAQ8B,SAASzC,EAAY0C,OAAAA,CAAQ,KAAK,IAAIN,IAAAA,MAAU,MACxDK,SAASzC,IACT2C,IAAc1C,EAAUuC,QAAAA,CAAS,OACjC7B,IAAQ8B,SAASxC,EAAUyC,OAAAA,CAAQ,KAAK,IAAIN,IAAAA,MAAU,MACtDK,SAASxC;QAQf,OALIhF,IAAAA,CAAK8D,QAAAA,IAAAA,CACLsD,IAAsB,MAAA,GAIlBA;YACJ,KAAK;YAyBL;gBACIpH,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GACd7E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAcW,IAAQ4B;gBACvC;YAvBJ,KAAK;gBACDtH,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GACd7E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GACbW,IACA4B,IACc,KAAdP;gBACJ;YAEJ,KAAK;gBACD/G,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GACd7E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GACbW,IACA4B,IACAP;gBACJ;YAEJ,KAAK;gBACD/G,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GAAQ;QAAA;QAUlC,OAAQwC;YACJ,KAAK;gBACDrH,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GAAM9E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAc2C;gBACnD;YAEJ,KAAK;gBACD1H,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GACd9E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAc2C,IAA4B,KAAdX;gBAC7C;YAOJ;gBACI/G,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GACd9E,IAAAA,CAAKsD,OAAAA,CAAQyB,WAAAA,GAAc2C,IAAcX;QAAAA;QAKrD,IAAI/G,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,IAAO9E,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,EAC3C,OAAQwC;YACJ,KAAK;YAcL;gBACIrH,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GAAM9E,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GAAQ;gBAClD;YAZJ,KAAK;gBACD7E,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GACd9E,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GAAsB,KAAdkC;gBAC9B;YAEJ,KAAK;gBACD/G,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,GACd9E,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,GAAQkC;QAAAA;IAQ9C;IAUQlB,iBAAiB8B,CAAAA,EAAAA;QAErB,MAAMlE,IACFkE,QAAAA,IAAAA,IAAAA,CDhcoC1F,IAqCrCL,ECgaS5B,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,EAClB7E,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA,EDjaR,GAAG,GCkab9E,IAAAA,CAAKuD,aAAAA,CAAAA,IALT,IAAA,IDjcetB,ICkcf,IAAA,IDlcmCA;QADnC,IAAgCA;QC6cxC,IAFAjC,IAAAA,CAAKyD,QAAAA,GAAWA,GAEZA,KAAYzD,IAAAA,CAAK0D,YAAAA,EAAc;YAW/B,IAVA1D,IAAAA,CAAK0D,YAAAA,GAAeD,GAGpBzD,IAAAA,CAAK0B,UAAAA,CAAW2C,iBAAAA,IAAqBrE,IAAAA,CAAK4H,eAAAA,CAAgBnE,IAG1DzD,IAAAA,CAAK0B,UAAAA,CAAW4C,mBAAAA,IACZtE,IAAAA,CAAK6H,uBAAAA,CAAwBpE,IAG7BzD,IAAAA,CAAK0B,UAAAA,CAAW0C,oBAAAA,EAChB,KAAK,MAAM0D,KAAAA,IAAAA,CAAuBnE,sBAAAA,CAC9B3D,IAAAA,CAAK2C,eAAAA,IACD3C,IAAAA,CAAK2C,eAAAA,CAAgBoF,IAAAA,CAncb,oBAqcJtE,GACAqE,EAAeE,UAAAA,EACfF,EAAeG,QAAAA;YAM/BxE,IAAW,KAAKA,IAAW,KAAKzD,IAAAA,CAAKuB,SAAAA,IACxB,MAAbkC,KAAkBzD,IAAAA,CAAKyB,YAAAA,IACV,MAAbgC,KAAkBzD,IAAAA,CAAKyB,YAAAA;QAC1B;IACL;IASAmG,gBAAgBM,IAAkB,CAAA,EAAA;QAC9BlI,IAAAA,CAAKU,GAAAA,CAAIsF,KAAAA,CAAMmC,WAAAA,CA5dE,cA8dbD,EAAgBE,QAAAA;IAExB;IASAP,wBAAwBK,IAAkB,CAAA,EAAA;QACtC,MAAMG,IAAkBrI,IAAAA,CAAK0B,UAAAA,CAAW4C,mBAAAA;QAExC,IAAA,CAAK+D,GAAiB;QAEtB,MAAMC,IAAc,IAAIC,YAAYF,GAAiB;YACjDG,QAAQ;gBACJ7H,QAAQX,IAAAA,CAAKU,GAAAA;gBACb+C,UAAUyE;YAAAA;QAAAA;QAGlBhD,OAAOuD,aAAAA,CAAcH;IACzB;IAOAjD,6BAAAA;QACI,IAAA,CAAKrF,IAAAA,CAAK2C,eAAAA,EACN;QAGJ,MAAM+F,IAAiBC,OAAOC,IAAAA,CAAK5I,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,EAAS4E,MAAAA,EAAQC,IACzDA,EAAIvB,QAAAA,CAAS,YAEXwB,IAAiBJ,OAAOvI,OAAAA,CAAQJ,IAAAA,CAAK2C,eAAAA,CAAgBoG,OAAAA;QAE3D,IAAKL,EAAeM,MAAAA,EAIpB,KAAK,MAAMC,KAAiBP,EAAgB;YACxC,MAAMT,IAAWjI,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAQgF,EAAAA;YAElC,IAAA,CAAKhB,GACD;YAGJ,KAAK,MAAMiB,KAAUH,EAAS;gBAC1B,MAAA,CAAOf,GAAYmB,EAAAA,GAAaD;gBAE5BjB,KAAYkB,KACZnJ,IAAAA,CAAK2D,sBAAAA,CAAuByF,IAAAA,CAAK;oBAC7BpB,YAAAA;oBACAC,UAAAA;gBAAAA;YAGX;QACJ;IACL;IAOA5B,qBAAAA;QACI,MAAMgD,IAA2BnH,EAC7B;YAAClC,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA;YAAO7E,IAAAA,CAAKqD,YAAAA,CAAayB,GAAAA;SAAAA,EAC5C9E,IAAAA,CAAKuD,aAAAA;QAET,OAAOvD,IAAAA,CAAKqD,YAAAA,CAAawB,KAAAA,KAAUwE,IAC7B,UACA;IACV;IAUA/C,cAAcgD,CAAAA,EAAoBlD,CAAAA,EAAAA;QAAoB,IAAAmD,GAAAC;QAClD,MAAMC,IAAiBF,QAAAA,CAAHA,IAAGvJ,IAAAA,CAAK0B,UAAAA,CAAW+C,UAAAA,IAAAA,KAAhB8E,IAAAA,EAA4BtC,KAAAA,CAAM,MACnDyC,IAAAA,QAAAA,CAAQF,IAAGxJ,IAAAA,CAAK0B,UAAAA,IAAAA,KAAAA,IAAL8H,EAAiB9E,cAAAA;QAElC,IAAI+E,KAAkBA,EAAeT,MAAAA,GAAS,GAAG;YAAAW,IAAAA;YAE7C,MAAA,CAAOC,GAAM5B,GAAYC,EAAAA,GAAYwB;YACrC,IAAII;YAIAA,IADAH,IACiB1J,IAAAA,CAAKU,GAAAA,CAAIuD,OAAAA,CAAiB,CAAA,MAAA,EAAA+D,EAAWb,IAAAA,IAAAA,CAAAA,GAErCc,GAGrBjI,IAAAA,CAAK2C,eAAAA,IACD3C,IAAAA,CAAK2C,eAAAA,CAAgBoF,IAAAA,CACjB6B,EAAKzC,IAAAA,IACL;gBACIxG,QAAQX,IAAAA,CAAKU,GAAAA;gBACb4I,KAAAA;gBACAlD,MAAAA;YAAAA,GAEJ4B,EAAWb,IAAAA,IAAAA,QAAAA,CAAMwC,IACjBE,CAAAA,IAAAA,KAAAA,IAAAF,EAAgBxC,IAAAA;QAE3B,OAAA,IAAUsC,GAAgB;YAEvB,MAAA,CAAOpB,EAAAA,GAAmBoB,GACpBnB,IAAc,IAAIC,YAAYF,GAAiB;gBACjDG,QAAQ;oBACJ7H,QAAQX,IAAAA,CAAKU,GAAAA;oBACb4I,KAAAA;oBACAlD,MAAAA;gBAAAA;YAAAA;YAGRlB,OAAOuD,aAAAA,CAAcH;QACxB;IACL;AAAA;AChnBJ,MAAMwB,IAA2B;IAC7B;IACA;IACA;IACA;IACA;IACA;CAAA;AAOU,MAAOC;IAajBnK,YAAAA,EAAYc,KACRA,CAAAA,EAAGiC,iBACHA,CAAAA,EAAeqH,mBACfA,CAAAA,EAAiBC,eACjBA,CAAAA,EAAalH,mBACbA,CAAAA,EAAAA,CAAAA;QACU/C,IAAAA,CAlBNkK,gBAAAA,GAAAA,KAAgB,GAAAlK,IAAAA,CAChB2C,eAAAA,GAAAA,KAAe,GAAA3C,IAAAA,CACfgK,iBAAAA,GAAAA,KAAiB,GAAAhK,IAAAA,CACjBiK,aAAAA,GAAAA,KACApK,GAAAA,IAAAA,CAAAA,cAAAA,GAAAA,KACAsK,GAAAA,IAAAA,CAAAA,uBAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,iBAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,sBAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAC,iBAAAA,GAAAA,KAAiB,GAAAtK,IAAAA,CACjBuK,aAAAA,GAAAA,KAAa,GAAAvK,IAAAA,CACb+C,iBAAAA,GAAAA,KAAiB,GAShBrC,IAAAA,CAMLV,IAAAA,CAAKkK,gBAAAA,GAAmBxJ,GAGxBV,IAAAA,CAAK2C,eAAAA,GAAkBA,GAGvB3C,IAAAA,CAAK+C,iBAAAA,GAAoBA,GAGzB/C,IAAAA,CAAKgK,iBAAAA,GAAqC,QAAjBA,IAAAA,IAtCL,uBAuCpBhK,IAAAA,CAAKiK,aAAAA,GAAAA,QAAgBA,IAAAA,IAtCL,uBAyChBjK,IAAAA,CAAKH,cAAAA,GAAiB,EAAA,EACtBG,IAAAA,CAAKmK,uBAAAA,GAA0B,EAAA,EAC/BnK,IAAAA,CAAKoK,iBAAAA,GAAoB,EAAA,EACzBpK,IAAAA,CAAKqK,sBAAAA,GAAyB,EAAA,EAI9BrK,IAAAA,CAAKE,KAAAA,EAAAA,IAzBDsK,QAAQC,KAAAA,CAAM;IA0BtB;IAOQvK,QAAAA;QACJ,MAAMwK,IACF1K,IAAAA,CAAKkK,gBAAAA,CAAiBS,gBAAAA,CAAiB,kBAErCC,IAAqBC,MAAMzE,IAAAA,CAAKsE;QACtC1K,IAAAA,CAAK8K,wBAAAA,CAAyBF,IAG9B5K,IAAAA,CAAKsK,iBAAAA,GAAoB,IAAI3K,EAAG;YAC5BE,gBAAgB;mBAAIG,IAAAA,CAAKmK,uBAAAA;aAAAA;YACzBrK,YAAYE,IAAAA,CAAKgK,iBAAAA;YACjBjK,OAAAA,CAAO;QAAA,IAIXC,IAAAA,CAAKuK,aAAAA,GAAgB,IAAI5K,EAAG;YACxBE,gBAAgB;mBAAIG,IAAAA,CAAKoK,iBAAAA;aAAAA;YACzBtK,YAAYE,IAAAA,CAAKiK,aAAAA;YACjBlK,OAAAA,CAAO;QAAA;IAEf;IAKOmB,UAAAA;QACHlB,IAAAA,CAAKsK,iBAAAA,CAAkBpJ,OAAAA,IACvBlB,IAAAA,CAAKuK,aAAAA,CAAcrJ,OAAAA,IACnBlB,IAAAA,CAAK+K,6BAAAA;IACT;IAKAxF,SAAAA,EAAShC,eAAEA,CAAAA,EAAAA,EAAAA;QACP,KAAK,MAAMvC,KAAqBhB,IAAAA,CAACoK,iBAAAA,CAC7BpJ,EAAcuE,QAAAA,CAAS;YACnBhC,eAAAA;QAAAA;IAGZ;IAKAiC,SAAAA,EAASjC,eAAEA,CAAAA,EAAakC,QAAEA,CAAAA,EAAAA,EAAAA;QACtB,KAAK,MAAMzE,KAAqBhB,IAAAA,CAACqK,sBAAAA,CAC7BrJ,EAAcwE,QAAAA,CAAS;YACnBjC,eAAAA;YACAkC,QAAAA;QAAAA;IAGZ;IAOAuF,qBAAqBC,CAAAA,EAAAA;QACjB,MAAMC,IACFD,EAAcN,gBAAAA,CAAiB;QAEnC,IAAKO,EAAwBlC,MAAAA,EAA7B;YAGA,IAAK,IAAImC,IAAQ,GAAGA,IAAQnL,IAAAA,CAAKmK,uBAAAA,CAAwBnB,MAAAA,EAAQmC,IAAS;gBACtE,MAAMnK,IAAgBhB,IAAAA,CAAKmK,uBAAAA,CAAwBgB,EAAAA;gBAChBN,MAAMzE,IAAAA,CAAK8E,GACfE,OAAAA,CAAQpK,EAAcN,GAAAA,IAAAA,CAAQ,KAAA,CACzDV,IAAAA,CAAKsK,iBAAAA,CAAkBjJ,SAAAA,CAAUL,EAAcN,GAAAA,GAC/CV,IAAAA,CAAKmK,uBAAAA,CAAwBkB,MAAAA,CAAOF,GAAO,EAAA;YAElD;YAED,IAAK,IAAIA,IAAQ,GAAGA,IAAQnL,IAAAA,CAAKoK,iBAAAA,CAAkBpB,MAAAA,EAAQmC,IAAS;gBAChE,MAAMnK,IAAgBhB,IAAAA,CAAKoK,iBAAAA,CAAkBe,EAAAA;gBACVN,MAAMzE,IAAAA,CAAK8E,GACfE,OAAAA,CAAQpK,EAAcN,GAAAA,IAAAA,CAAQ,KAAA,CACzDV,IAAAA,CAAKuK,aAAAA,CAAclJ,SAAAA,CAAUL,EAAcN,GAAAA,GAC3CV,IAAAA,CAAKoK,iBAAAA,CAAkBiB,MAAAA,CAAOF,GAAO,EAAA;YAE5C;YAGDD,EAAwB7K,OAAAA,EAASe;gBAC7B,MAAMkK,IACFtL,IAAAA,CAAKqK,sBAAAA,CAAuB7J,IAAAA,EACvBQ,IAAkBA,EAAcN,GAAAA,KAAQU,IAE3CmK,IAAsBvL,IAAAA,CAAKH,cAAAA,CAAeW,IAAAA,EAC3CQ,IAAkBA,EAAcN,GAAAA,KAAQU;gBAGzCkK,KACAtL,IAAAA,CAAKwL,yBAAAA,CAA0BF,IAE/BC,KAAAA,CACAvL,IAAAA,CAAKH,cAAAA,GAAiBG,IAAAA,CAAKH,cAAAA,CAAegJ,MAAAA,EACrC4C,IACGA,EAAkB/I,EAAAA,IAAM6I,EAAoB7I,EAAAA,CAAAA;YAEvD;QAAA;IAET;IAOAgJ,kBAAkBC,CAAAA,EAAAA;QAEd,MAAMjB,IAAkBiB,EAAchB,gBAAAA,CAAiB,kBAGjDiB,IAAgB,EAAA;QACtB5L,IAAAA,CAAKH,cAAAA,CAAeQ,OAAAA,EAASW;YACzB4K,EAAIxC,IAAAA,CAAKpI,EAAc0B,EAAAA;QAC3B;QACA,MACMmJ,IADQtJ,KAAKwD,GAAAA,IAAO6F,KACA,GACpBhB,IAAqBC,MAAMzE,IAAAA,CAAKsE;QACtC1K,IAAAA,CAAK8K,wBAAAA,CACDF,GACAiB,GAAAA,CACA;IAER;IAWAf,yBACIJ,CAAAA,EACAmB,IAAY,CAAA,EACZC,IAAAA,CAAY,CAAA,EAAA;QAGZ,IAAK,IAAIX,IAAQ,GAAGA,IAAQT,EAAgB1B,MAAAA,EAAQmC,IAAS;YACzD,MAAM/J,IAAiBsJ,CAAAA,CAAgBS,EAAAA,EACjCrI,IAAU9C,IAAAA,CAAK+L,eAAAA,CAAgB3K,IAE/B4K,IAAwB,IAAIvJ,EAAc;gBAC5C/B,KAAKU;gBACLsB,IAAImJ,IAAYV;gBAChBpI,mBAAmB/C,IAAAA,CAAK+C,iBAAAA;gBACxBJ,iBAAiB3C,IAAAA,CAAK2C,eAAAA;gBACtBC,0BACI5C,IAAAA,CAAKiM,uBAAAA,CAAwBC,IAAAA,CAAKlM,IAAAA;gBACtC6C,4BACI7C,IAAAA,CAAKwL,yBAAAA,CAA0BU,IAAAA,CAAKlM,IAAAA;gBACxC8C,SAAAA;YAAAA;YAIJ9C,IAAAA,CAAKH,cAAAA,CAAeuJ,IAAAA,CAAK4C,IAGrBlJ,IAAAA,CACA9C,IAAAA,CAAKoK,iBAAAA,CAAkBhB,IAAAA,CAAK4C,IAGxBF,KAAAA,CACA9L,IAAAA,CAAKuK,aAAAA,CAAc1K,cAAAA,CAAeuJ,IAAAA,CAC9B4C,IAEJhM,IAAAA,CAAKuK,aAAAA,CAActJ,OAAAA,CAAQ+K,EAAsBtL,GAAAA,CAAAA,CAAAA,IAAAA,CAGrDV,IAAAA,CAAKmK,uBAAAA,CAAwBf,IAAAA,CAAK4C,IAG9BF,KAAAA,CACA9L,IAAAA,CAAKsK,iBAAAA,CAAkBzK,cAAAA,CAAeuJ,IAAAA,CAClC4C,IAEJhM,IAAAA,CAAKsK,iBAAAA,CAAkBrJ,OAAAA,CAAQ+K,EAAsBtL,GAAAA,CAAAA,CAAAA;QAGhE;IACL;IAOAqK,gCAAAA;QACI/K,IAAAA,CAAKH,cAAAA,GAAiB,EAAA,EACtBG,IAAAA,CAAKoK,iBAAAA,GAAoB,EAAA,EACzBpK,IAAAA,CAAKmK,uBAAAA,GAA0B,EAAA,EAC/BnK,IAAAA,CAAKqK,sBAAAA,GAAyB;IAClC;IAUA4B,wBAAwBjL,CAAAA,EAAAA;QACpBhB,IAAAA,CAAKqK,sBAAAA,CAAuBjB,IAAAA,CAAKpI;IACrC;IAUAwK,0BAA0BxK,CAAAA,EAAAA;QACtBhB,IAAAA,CAAKqK,sBAAAA,GAAyBrK,IAAAA,CAAKqK,sBAAAA,CAAuBxB,MAAAA,EACrDsD,IACGA,EAAsBzJ,EAAAA,IAAM1B,EAAc0B,EAAAA;IAEtD;IAWAqJ,gBAAgB3K,CAAAA,EAAAA;QACZ,IAAIgL,IAAwB;eAAItC;SAAAA;QAGhC,MAAMuC,KAAmBC;YACrBF,IAAwBA,EAAsBvD,MAAAA,EACzC0D,IAAcA,KAAaD;QAAiB;QAKrD,IAAIlL,EAAe6C,OAAAA,CAAQC,YAAAA,EAAc;YAKrC,IAAa,SAJC9C,EAAe6C,OAAAA,CAAQC,YAAAA,CAChC+C,KAAAA,CAAM,KACNuF,GAAAA,EAAKC,IAASA,EAAKhF,OAAAA,CAAQ,KAAK,IAAIN,IAAAA,IACpCuF,IAAAA,CAAK,MAEN,OAAA,CAAO;YAEPL,EAAgB;QAEvB,OACGA,EAAgB;QAIpB,IAAIjL,EAAe6C,OAAAA,CAAQE,cAAAA,EAAgB;YAEvC,IAAa,gBADC/C,EAAe6C,OAAAA,CAAQE,cAAAA,CAAegD,IAAAA,IAEhD,OAAA,CAAO;YAEPkF,EAAgB;QAEvB,OACGA,EAAgB;QAIpB,IACIjL,EAAe6C,OAAAA,CAAQM,WAAAA,IAAAA,CACtBuB,MAAMtB,WAAWpD,EAAe6C,OAAAA,CAAQM,WAAAA,IAEzC,OAAA,CACH;QACG8H,EAAgB;QAIpB,KAAK,MAAME,KAAaH,EACpB,IAAIG,KAAanL,EAAe6C,OAAAA,EAC5B,OAAA,CACH;QAGL,OAAA,CAAA;IACJ;AAAA;ACpWiB,MAAA0I;IAMjB/M,YAAAA,EAAYgN,gBAAEA,CAAAA,EAAcC,gBAAEA,EAAiBA,EAAAA,KAAAA,CAAAA,EAAAA,CAAAA;QAAsB7M,IAAAA,CAL7D8M,eAAAA,GAAAA,KAAe,GAAA9M,IAAAA,CACf+M,cAAAA,GAAAA,KAAc,GAAA/M,IAAAA,CACdC,QAAAA,GAAAA,KAAQ,GAAAD,IAAAA,CACR6M,cAAAA,GAAAA,KAAc,GAIlB7M,IAAAA,CAAK8M,eAAAA,GAAkBF,GACvB5M,IAAAA,CAAK6M,cAAAA,GAAiBA,GAGtB7M,IAAAA,CAAK+M,cAAAA,GAAAA,CAAiB,GAGtB/M,IAAAA,CAAKE,KAAAA;IACT;IAOQA,QAAAA;QAQJF,IAAAA,CAAKC,QAAAA,GAAW,IAAI+M,gBANF5M;YAAkC,IAAA6M;YAAAA,CAC/CjN,IAAAA,CAAK+M,cAAAA,IAAAA,CAAqC,QAAA,CAAvBE,IAAIjN,IAAAA,CAAK6M,cAAAA,KAALI,EAAAlF,IAAAA,CAAA/H,IAAAA,CAAAA,GACxBA,IAAAA,CAAK+M,cAAAA,GAAAA,CAAiB;QAC1B;QAMA,KAAK,MAAMG,KAAsBlN,IAAAA,CAAC8M,eAAAA,CAC9B9M,IAAAA,CAAKC,QAAAA,CAASgB,OAAAA,CAAQiM;IAE9B;IAKOhM,UAAAA;QACHlB,IAAAA,CAAKC,QAAAA,CAASkB,UAAAA;IAClB;AAAA;AC7CJ,MAAMgM,IAAqC;IACvCC,SAASlI;IACTmI,SAASC,SAASC,eAAAA;IAClBC,cAActI;IACduI,MAAM;IACNC,UAAU;IACVC,aAAa;IACbC,oBAAoB;IACpBC,aAAAA,CAAa;IACbC,aAAAA,CAAa;IACbC,WAAAA,CAAW;IACXC,eAAe;IACfC,wBAAwB;IACxBC,iBAAiB;IACjBC,iBAAiB;IACjBC,gBAAAA,CAAgB;IAChBC,YAAAA,CAAY;IACZC,SAASC,IAAMhM,KAAKiM,GAAAA,CAAI,GAAG,QAAQjM,KAAKkM,GAAAA,CAAI,GAAA,CAAI,KAAKF;AAAAA;AAc3C,MAAOG;IAqBjB9O,YAAAA,EAAY+O,cACRA,IAAe,CAAA,CAAA,EAAEhM,iBACjBA,CAAAA,EAAeqH,mBACfA,CAAAA,EAAiBC,eACjBA,CAAAA,EAAaoE,YACbA,IAAAA,CAAa,CAAA,EAAIO,WACjBA,IAAAA,CAAY,CAAA,EAAIC,gBAChBA,EAAiBA,EAAAA,KAAAA,CAAAA,EAAQC,kBACzBA,CAAAA,EAAgBC,qBAChBA,CAAAA,EAAAA,GAC0B,CAAA,CAAA,CAAA;QAAE/O,IAAAA,CA9BzBgP,UAAAA,GAAAA,KAECC,GAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,YAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CAEAP,YAAAA,GAAAA,KAAY,GAAA3O,IAAAA,CACZ2C,eAAAA,GAAAA,KACAqH,GAAAA,IAAAA,CAAAA,iBAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAC,aAAAA,GAAAA,KAAa,GAAAjK,IAAAA,CACbmP,WAAAA,GAAAA,KAAW,GAAAnP,IAAAA,CACXqO,UAAAA,GAAAA,KACAO,GAAAA,IAAAA,CAAAA,SAAAA,GAAAA,KACAQ,GAAAA,IAAAA,CAAAA,UAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CAEAN,gBAAAA,GAAAA,KAAgB,GAAA9O,IAAAA,CAChB+O,mBAAAA,GAAAA,KAAmB,GAAA/O,IAAAA,CACnBqP,aAAAA,GAAAA,KACAC,GAAAA,IAAAA,CAAAA,aAAAA,GAAAA,KAAAA,GAAAA,IAAAA,CACAC,eAAAA,GAAAA,KAAe,GAcnBvP,IAAAA,CAAK2O,YAAAA,GAAYa,EAAAA,CAAAA,GAAQrC,GAAwBwB,IAEjDhG,OAAO8G,MAAAA,CAAOzP,IAAAA,EAAM;YAChB2O,cAAAA;YACAhM,iBAAAA;YACAqH,mBAAAA;YACAC,eAAAA;YACAoE,YAAAA;YACAO,WAAAA;YACAC,gBAAAA;YACAC,kBAAAA;YACAC,qBAAAA;QAAAA,IAIJ/O,IAAAA,CAAKqP,aAAAA,GAAgBrP,IAAAA,CAAK0P,SAAAA,CAAUxD,IAAAA,CAAKlM,IAAAA,GACzCA,IAAAA,CAAKuP,eAAAA,GAAkBvP,IAAAA,CAAK2P,WAAAA,CAAYzD,IAAAA,CAAKlM,IAAAA,GAC7CA,IAAAA,CAAKsP,aAAAA,GAAgBtP,IAAAA,CAAK4P,SAAAA,CAAU1D,IAAAA,CAAKlM,IAAAA,GAGzCA,IAAAA,CAAKgP,UAAAA,GAAAA,CAAa,GAGlBhP,IAAAA,CAAKE,KAAAA;IACT;IAOQA,QAAAA;QAAAA,IAAK2P;QAET7P,IAAAA,CAAKiP,aAAAA,GAAgB,IAAIa,+KAAAA,CAAM;YAC3B1C,SAASpN,IAAAA,CAAK2O,YAAAA,CAAavB,OAAAA;YAC3BC,SAASrN,IAAAA,CAAK2O,YAAAA,CAAatB,OAAAA;YAC3BG,cAAcxN,IAAAA,CAAK2O,YAAAA,CAAanB,YAAAA;YAChCC,MAAMzN,IAAAA,CAAK2O,YAAAA,CAAalB,IAAAA;YACxBC,UAAU1N,IAAAA,CAAK2O,YAAAA,CAAajB,QAAAA;YAC5BC,aAAa3N,IAAAA,CAAK2O,YAAAA,CAAahB,WAAAA;YAC/BC,oBAAoB5N,IAAAA,CAAK2O,YAAAA,CAAaf,kBAAAA;YACtCC,aAAa7N,IAAAA,CAAK2O,YAAAA,CAAad,WAAAA;YAC/BC,aAAa9N,IAAAA,CAAK2O,YAAAA,CAAab,WAAAA;YAC/BC,WAAW/N,IAAAA,CAAK2O,YAAAA,CAAaZ,SAAAA;YAC7BC,eAAehO,IAAAA,CAAK2O,YAAAA,CAAaX,aAAAA;YACjCC,wBAAwBjO,IAAAA,CAAK2O,YAAAA,CAAaV,sBAAAA;YAC1CC,iBAAiBlO,IAAAA,CAAK2O,YAAAA,CAAaT,eAAAA;YACnCC,iBAAiBnO,IAAAA,CAAK2O,YAAAA,CAAaR,eAAAA;YACnCC,gBAAgBpO,IAAAA,CAAK2O,YAAAA,CAAaP,cAAAA;YAClCE,QAAQtO,IAAAA,CAAK2O,YAAAA,CAAaL,MAAAA;QAAAA,IAAAA,QAAAA,CAE9BuB,IAAAA,IAAAA,CAAKZ,aAAAA,KAALY,EAAoBE,EAAAA,CAAG,UAAU/P,IAAAA,CAAK6O,cAAAA,GAGtCvB,SAASC,eAAAA,CAAgByC,YAAAA,CACrB,2BACAhQ,IAAAA,CAAKiP,aAAAA,CAAcgB,OAAAA,CAAQtC,WAAAA,GAG/BuC,sBAAsB;YAElBlQ,IAAAA,CAAKkP,YAAAA,GAAe,IAAInF,EAAK;gBACzBrJ,KAAKV,IAAAA,CAAKiP,aAAAA,CAAckB,WAAAA;gBACxBxN,iBAAiB3C,IAAAA,CAAK2C,eAAAA;gBACtBqH,mBAAmBhK,IAAAA,CAAKgK,iBAAAA;gBACxBC,eAAejK,IAAAA,CAAKiK,aAAAA;gBACpBlH,mBAAmB/C,IAAAA,CAAKiP,aAAAA,CAAcgB,OAAAA,CAAQtC,WAAAA;YAAAA,IAIlD3N,IAAAA,CAAKoQ,WAAAA,IAGDpQ,IAAAA,CAAK8O,gBAAAA,IAAAA,CAAqB9O,IAAAA,CAAK+O,mBAAAA,GAC/BvE,QAAQ6F,IAAAA,CACJ,0HAAA,CAEIrQ,IAAAA,CAAK8O,gBAAAA,IAAoB9O,IAAAA,CAAK+O,mBAAAA,IACtCvE,QAAQ6F,IAAAA,CACJ,yHAKRrQ,IAAAA,CAAK4O,SAAAA,IAAa5O,IAAAA,CAAK6E,KAAAA;QAAK;IAEpC;IAKO3D,UAAAA;QAAAA,IAAOoP;QAEVtQ,IAAAA,CAAKuQ,IAAAA,IAELvQ,IAAAA,CAAKwQ,aAAAA,IAELxQ,IAAAA,CAAKiP,aAAAA,CAAc/N,OAAAA,IAEnBoP,QAAAA,CAAAA,IAAAA,IAAAA,CAAKpB,YAAAA,KAALoB,EAAmBpP,OAAAA,IAGnBgP,sBAAsB;YAAK,IAAAO;YAAAA,QAAAA,CACvBA,IAAAzQ,IAAAA,CAAKkP,YAAAA,KAALuB,EAAmBvP,OAAAA;QAAO;IAElC;IAKQkP,cAAAA;QACJpQ,IAAAA,CAAK0Q,mBAAAA,IAED1Q,IAAAA,CAAKqO,UAAAA,IAAAA,CACD,oBAAoBnJ,SACpBlF,IAAAA,CAAKoP,UAAAA,GAAa,IAAIzC,EAAG;YACrBC,gBAAgB;gBAACU,SAASqD,IAAAA;aAAAA;YAC1B9D,gBAAgB7M,IAAAA,CAAKsP,aAAAA;QAAAA,KAGxBpK,OAAe0L,gBAAAA,CAAiB,UAAU5Q,IAAAA,CAAKsP,aAAAA,CAAAA;IAG5D;IAKQkB,gBAAAA;QACJxQ,IAAAA,CAAK6Q,qBAAAA,IAED7Q,IAAAA,CAAKqO,UAAAA,IAAAA,CACD,oBAAoBnJ,SACpBlF,IAAAA,CAAKoP,UAAAA,IAAcpP,IAAAA,CAAKoP,UAAAA,CAAWlO,OAAAA,KAElCgE,OAAe4L,mBAAAA,CACZ,UACA9Q,IAAAA,CAAKsP,aAAAA,CAAAA;IAIrB;IAKQoB,oBAAoBK,CAAAA,EAAAA;QACxB,MAAMC,IAAiBD,KAEjB/Q,IAAAA,CAAKiP,aAAAA,CAAckB,WAAAA,EACnBc,IAAAA,QACFD,IAAAA,KAAAA,IAAAA,EAAgBrG,gBAAAA,CAAiB;QAAA,CAEpB,QAAjBsG,IAAAA,KAAiB,IAAjBA,EAAmBjI,MAAAA,KACfiI,EAAkB5Q,OAAAA,EAASK;YACvBA,EAAIkQ,gBAAAA,CAAiB,SAAS5Q,IAAAA,CAAKuP,eAAAA,EAAAA,CAAiB;QACxD;IACR;IAKQsB,sBAAsBE,CAAAA,EAAAA;QAC1B,MAAMC,IAAiBD,KAEjB/Q,IAAAA,CAAKiP,aAAAA,CAAckB,WAAAA,EACnBc,IACFD,QAAAA,IAAAA,KAAAA,IAAAA,EAAgBrG,gBAAAA,CAAiB;QAAA,CAAA,QACrCsG,IAAAA,KAAAA,IAAAA,EAAmBjI,MAAAA,KACfiI,EAAkB5Q,OAAAA,EAASK;YACvBA,EAAIoQ,mBAAAA,CAAoB,SAAS9Q,IAAAA,CAAKuP,eAAAA,EAAAA,CAAiB;QAC3D;IACR;IAKQK,YAAAA;QAEJM,sBAAsB;YAAKgB,IAAAA;YACN,QAAA,CAAjBA,IAAIlR,IAAAA,CAACkP,YAAAA,KAALgC,EAAmB3L,QAAAA,CAAS;gBACxBhC,eAAevD,IAAAA,CAAKiP,aAAAA,CAAckC,MAAAA;YAAAA;QAE1C;IACJ;IAKQzB,YAAAA;QAAS0B,IAAAA,GAAAC;QAAAA,QAAAA,CACbD,IAAAA,IAAAA,CAAKnC,aAAAA,KAALmC,EAAoBE,GAAAA,CAAIC,KAAKC,GAAAA,KAE7BH,QAAAA,CAAAA,IAAAA,IAAAA,CAAKnC,YAAAA,KAALmC,EAAmB7L,QAAAA,CAAS;YACxBjC,eAAevD,IAAAA,CAAKiP,aAAAA,CAAckC,MAAAA;YAClC1L,QAAQzF,IAAAA,CAAKiP,aAAAA,CAAcwC,QAAAA;QAAAA;IAEnC;IAKQ9B,YAAY+B,CAAAA,EAAAA;QAAiBC,IAAAA;QACjCD,EAAME,cAAAA;QACN,MAAMC,IAA8CF,QAAAA,CAAvCA,IAAID,EAAMI,aAAAA,IAA6BH,IAAI;QACxD,IAAA,CAAKE,GAAS;QACd,MAAMlR,IACFkR,EAAQE,YAAAA,CAAa,0BACrBF,EAAQE,YAAAA,CAAa,SACnB/K,IAAS6K,EAAQE,YAAAA,CAAa,4BAA4B,GAC1DrE,IACFmE,EAAQE,YAAAA,CAAa,8BACrB/R,IAAAA,CAAK2O,YAAAA,CAAajB,QAAAA,IAClBP,EAAoBO,QAAAA;QAExB/M,KACIX,IAAAA,CAAKgS,QAAAA,CAASrR,GAAQ;YAClBqG,QAA0B,YAAA,OAAXA,IAAsBQ,SAASR,KAAUA;YACxD0G,UACwB,YAAA,OAAbA,IACDlG,SAASkG,KACTA;QAAAA;IAEtB;IAKO7I,QAAAA;QAAKoN,IAAAA;QACJjS,IAAAA,CAAKgP,UAAAA,IAAAA,CAAAA,QAAAA,CAKTiD,IAAAA,IAAAA,CAAKhD,aAAAA,KAALgD,EAAoBpN,KAAAA,IAEpB7E,IAAAA,CAAKgP,UAAAA,GAAAA,CAAa,GAClBhP,IAAAA,CAAK8O,gBAAAA,GACC9O,IAAAA,CAAK8O,gBAAAA,CAAiB9O,IAAAA,CAAKqP,aAAAA,IAC3BrP,IAAAA,CAAKkS,IAAAA,EAAAA;IACf;IAKO3B,OAAAA;QAAI,IAAA4B;QACFnS,IAAAA,CAAKgP,UAAAA,IAAAA,CAKVmD,QAAAA,CAAAA,IAAInS,IAAAA,CAACiP,aAAAA,KAALkD,EAAoB5B,IAAAA,IAEpBvQ,IAAAA,CAAKgP,UAAAA,GAAAA,CAAa,GAClBhP,IAAAA,CAAK+O,mBAAAA,GACC/O,IAAAA,CAAK+O,mBAAAA,CAAoB/O,IAAAA,CAAKqP,aAAAA,IAC9BrP,IAAAA,CAAKmP,WAAAA,IAAeiD,qBAAqBpS,IAAAA,CAAKmP,WAAAA,CAAAA;IACxD;IAKOnE,qBAAqBC,CAAAA,EAAAA;QAA0BoH,IAAAA;QAC7CpH,IAAAA,CAKLjL,IAAAA,CAAK6Q,qBAAAA,CAAsB5F,IACV,QAAA,CAAjBoH,IAAArS,IAAAA,CAAKkP,YAAAA,KAALmD,EAAmBrH,oBAAAA,CAAqBC,EAAAA,IALpCT,QAAQC,KAAAA,CAAM;IAMtB;IAKOiB,kBAAkBC,CAAAA,EAAAA;QAA0B2G,IAAAA;QAC1C3G,IAAAA,CAKL2G,QAAAA,CAAAA,IAAItS,IAAAA,CAACkP,YAAAA,KAALoD,EAAmB5G,iBAAAA,CAAkBC,IACrCuE,sBAAsB;YAClBlQ,IAAAA,CAAK0Q,mBAAAA,CAAoB/E;QAAAA,EAAAA,IANzBnB,QAAQC,KAAAA,CAAM;IAQtB;IAKO8H,SAAAA;QACHvS,IAAAA,CAAKsP,aAAAA;IACT;IAKO0C,SACHrR,CAAAA,EACAsP,CAAAA,EAAAA;QAAAA,IAA+BuC;QAEb,QAAA,CAAlBA,IAAAxS,IAAAA,CAAKiP,aAAAA,KAALuD,EAAoBR,QAAAA,CAASrR,GAAQ;YACjCqG,QAAe,QAAPiJ,IAAAA,KAAO,IAAPA,EAASjJ,MAAAA;YACjByG,MAAAA,QAAMwC,IAAAA,KAAAA,IAAAA,EAASxC,IAAAA;YACfC,UAAAA,QAAUuC,IAAAA,KAAAA,IAAAA,EAASvC,QAAAA;YACnB+E,WAAAA,QAAWxC,IAAAA,KAAAA,IAAAA,EAASwC,SAAAA;YACpBC,MAAa,QAAPzC,IAAAA,KAAO,IAAPA,EAASyC,IAAAA;YACfC,OAAc,QAAP1C,IAAAA,KAAO,IAAPA,EAAS0C,KAAAA;YAChBrE,QAAe,QAAP2B,IAAAA,KAAO,IAAPA,EAAS3B,MAAAA;YACjBsE,YAAmB,QAAP3C,IAAAA,KAAO,IAAPA,EAAS2C,UAAAA;QAAAA;IAE7B;IAQQV,OAAAA;QACJlS,IAAAA,CAAKqP,aAAAA,IACLrP,IAAAA,CAAKmP,WAAAA,GAAce,sBAAsB,IAAMlQ,IAAAA,CAAKkS,IAAAA;IACxD;AAAA","debugId":null}}]
}